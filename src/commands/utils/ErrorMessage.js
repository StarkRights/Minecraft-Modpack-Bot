import {MessageEmbed} from 'discord.js'

/**
 *  A simple class to standardize end-user error messages across the bot.
 * 
 *  Whenever an error *could* be encountered, a new Error object is created,
 *  and subsequently thrown up until it's relevant to catch it. At the relevant
 *  stage, the error is caught, and sent through a new ErrorMessag
 *
 *  In example: An error is encountered in paginator = a new error is created, &
 *  thrown all the way up to the command execution, as an error there would mean
 *  that no further code execution of that command is possible/necessary.
 *  In the index.js execution, the catch block catches the issue & handles it
 *  First, by invoking .send, to console log & userlog the error in discord.
 *  Second, by parsing it into a mongodb format, & logging it into error stat
 *  tracking.
 */

export class ErrorMessage{
  constructor(errorObject){
    this.userMessage = errorObject.message;
    this.error = errorObject.error;
    this.type = errorObject.type;
    this.details = errorObject.details;
  }


  /**
   * async sendError - Logs a given error in all appropriate places.
   *
   * @return {void}
   */
  async sendError(){
    const errorEmbed = new MessageEmbed()
      .setColor('#ff000d')
      .setTitle(`${this.type}w Error:`)
      .setDescription(`The bot has encountered an error trying to perform your command. \n \n Details: ${this.details}`)
      .setTimestamp();
      //todo: accept custom fields & iterate them into embed
      //for(let i = 0; )
    this.userMessage.channel.send(errorEmbed);
  }
}

export class Error{


  /**
   * setType - Defines a general type of error for later handling
   *
   * @param  {string} type A short string description of the error
   * @return {void}
   */
  setType(type){
    this.type = type;
  }


  /**
   * setDetails - Defines relevant details of an error for later handling
   *
   * @param  {string} details A longer string description of the error to be sent to the user
   * @return {void}
   */
  setDetails(details){
    this.details = details;
  }


  /**
   * setError - Defines any machine-generated errors caught in a try block for later handling
   *
   * @param  {error} error Whatever error is *not* generated by us; a try/catch error
   * @return {void}
   */
  setError(error){
    this.error = error;
  }


  /**
   * setMessage - Defines the relevant discord usermessage for use in later handling
   *
   * @param  {message} message A discord message object
   * @return {void}
   */
  setMessage(message){
    this.message = message;
  }
}
